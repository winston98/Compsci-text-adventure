
/**
 * Write a description of class Key here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Key extends MapElement
{
    public static int numberOfKeys;
    public static String name = "key";
    public String specialName;
    public int keyID;
    
    public Key(String specialName, Material type) {
        this.specialName = specialName;
        this.type = type;
        keyID = numberOfKeys;
        isBroken = false;
        takeable = true;
        
        String[] tempActionList = {"use","fit"};
        actionList = tempActionList;
        
        numberOfKeys++; // This may cause problems in the future, since doors and keys will need to be initialized in pairs.
    }
    
    public Key() {
        type = new Material("wood");
        keyID = numberOfKeys;
        takeable = true;
        
        String[] tempActionList = {"use","fit"};
        actionList = tempActionList;
        
        numberOfKeys++;
    }
    
    public void use(String action) {
        int index = actionIndexOf(action);
        switch(index) {
            case -1:
                // should there be something here?
                break;
            case 0:
                MapElement doorElement = Player.room1.mapArray[Player.x][Player.y].findElement("door");
                if (doorElement != null) {
                    Door door = (Door)doorElement;
                    if (door.isLocked) {
                       door.unlock((MapElement)this);
                    }
                    else {
                       door.lock((MapElement)this);
                    }
                }
                else {
                    System.out.println("There is no door in this room!");
                }
                break;
            case 1:
                fit();
                break;
        }
    }
    
    public void use(String action, MapElement tool) {
        use(action); // is this what it should do?
    }
    
    public void fit() {
        int index = Player.room1.mapArray[Player.x][Player.y].indexOf("door");
        if (index > -1) {
            if (keyID == Player.room1.mapArray[Player.x][Player.y].get(index).getID()) {
                System.out.print("The key fits in the lock.");
            }
        }
        else {
            System.out.println("There is no door in this room!");
        }
    }
    
    public void fit(Door lock) {
        if (keyID == lock.getID()) {
            System.out.print("The key fits in the lock.");
        }
    }
    
    public String getName() {
        return name;
    }
}

//UPDATED
public class Key extends MapElement
{
    public static int numberOfKeys;
    public int keyID;
    
    public Key(String specialName, Material type) {
        super(specialName,type,true,false,new String[] {"use", "fit"});
        keyID = numberOfKeys;
        numberOfKeys++; // This may cause problems in the future, since doors and keys will need to be initialized in pairs.
    }
    
    public Key() {
        super("key",new Material("wood"),true,false,new String[] {"use", "fit"});
        keyID = numberOfKeys;
        numberOfKeys++;
    }
    
    public void use(String action) {
        int index = actionIndexOf(action);
        switch(index) {
            case -1:
                // should there be something here?
                break;
            case 0:
                fit();
                break;
            case 1:
                fit();
                break;
        }
    }
    
    public void fit() {
        int index = Player.room1.mapArray[Player.x][Player.y].indexOf("door");
        if (index > -1) {
            if (keyID == Player.room1.mapArray[Player.x][Player.y].get(index).getID()) {
                System.out.print("The key fits in the lock.");
            }
        }
        else {
            System.out.println("There is no door in this room!");
        }
    }
    
    public void fit(Door lock) {
        if (keyID == lock.getID()) {
            System.out.print("The key fits in the lock.");
        }
    }
}
