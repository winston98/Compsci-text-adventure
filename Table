
/**
 * Write a description of class Dor here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Table extends MapElement
{
    private int tableID;
    private String[] onTable;
    public static String name = "table";
    public String specialName;
    
    public Table(String specialName, Material type, int tableID) {
        this.specialName = specialName;
        this.type = type;
        this.tableID = tableID;
        isBroken = false;
        
        String[] tempActionList = {"break"};
        actionList = tempActionList;
    }
    
    public Table() {
        type = new Material("wood");;
        tableID = (int)(Math.random() * 1000);
        isBroken = false;
        
        String[] tempActionList = {"break"};
        actionList = tempActionList;
    }
    
    public void use(String action) {
        int index = actionIndexOf(action);
        switch(index) {
            case -1:
                // should there be something here?
                break;
            case 0:
                smash();
                break;
        }
    }   
    
    public void use(String action, MapElement tool) {
        int index = actionIndexOf(action);
        switch(index) {
            case -1:
                // should there be something here?
                break;
            case 0:
                smash(tool);
                break;
        }
    }    
    
    public void smash() {
        if (type.getStrength() < 10) {
            isBroken = true;
            System.out.print("You smash the table with your fists.");
        }
    }
    
    public void smash(MapElement item) {
        if (type.getStrength() < item.type.getStrength()) {
            isBroken = true;
            System.out.print("You smash the table with " + item + ".");
        }
    }
    
    public int getID() {
        return tableID;
    }
    
    public String getName() {
        return name;
    }
}

public class Table extends MapElement
{
    private int tableID;
    private String[] onTable;

    public Table(String specialName, Material type, boolean isBroken, int tableID, String[] onTable) {
        super(specialName,type,false,isBroken, new String[] {"break"});
        this.tableID = tableID;
        this.onTable = onTable;
    }

    public Table() {
        super("table",new Material("wood"), false, false, new String[] {"break"});
        tableID = (int)(Math.random() * 1000);
    }

    public void use(String action) {
        int toolIndex = action.indexOf('*');
        int actionIndex;
        if (toolIndex > -1) {
            actionIndex = actionIndexOf(action.substring(0,toolIndex));
            switch(actionIndex) {
                case -1:
                // should there be something here?
                break;
                case 0:
                MapElement tool = Player.inventory.findItem(action.substring(actionIndex+1));
                if (tool != null) {
                    smash(Player.inventory.findItem(action.substring(actionIndex+1)));
                }
                break;
            }
        }

        actionIndex = actionIndexOf(action);
        switch(actionIndex) {
            case -1:
            // should there be something here?
            break;
            case 0:
            smash();
            break;
        }
    }    

    public void smash() {
        if (getType().getStrength() < 10) {
            destroy();
            System.out.print("You smash the table with your fists.");
        }
    }

    public void smash(MapElement item) {
        if (getType().getStrength() < item.getType().getStrength()) {
            destroy();
            System.out.print("You smash the table with " + item + ".");
        }
    }

    public int getID() {
        return tableID;
    }
}
